// –í–∑–µ–º–∞–Ω–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—è –µ–∑–∏–∫
const systemLanguage = navigator.language || navigator.userLanguage;
const myH1 = document.getElementById("myH1");
const perviH3 = document.getElementById("perviH3");
const vtoriH3 = document.getElementById("vtoriH3");
const lblLes = document.getElementById("lblLesno");
const lblSred = document.getElementById("lblSredno");
const lblTrud = document.getElementById("lblTrudno");

const canvas = document.getElementById("gameCanvas");
const button = document.getElementById("button");
const restartButton = document.getElementById("restartButton");
const infoBar = document.getElementById("infoBar");
const ctx = canvas.getContext("2d");
let brVragove = 2;
const BR_TOPKI = 50;
let broiki = BR_TOPKI;
// –ú–∞—Å–∏–≤ –∑–∞ —Ç–æ–ø–∫–∏—Ç–µ
let balls = [];
let playerBall = null;
let speed = 3;
let isPaused = false;
let chocar = false; // –ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞, —Å–ª–µ–¥ —Å–±–ª—ä—Å—ä–∫.
let btnStartPressed = false;
const katasSound = new Audio("sounds/explosion.wav");
const pobedaSound = new Audio("sounds/snakeBonus.wav");
let posoka = "i";
// –ú–∞—Å–∏–≤ –∑–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏—Ü–∏—Ç–µ
let enemies = [];
let points = 0;
canvResized = false;
let broyach = 0;
let zakacheni = 0;
let fin = false;
let brFin = 0;
let enemiSkor1 = 0.5, enemiSkor2 = 1.5;
// –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å–ø–æ—Ä–µ–¥ –µ–∑–∏–∫–∞
const selectedLanguage = getLanguage();
let strHvanati = "—Ö–≤–∞–Ω–∞—Ç–∏";
let strDalg = "–¥—ä–ª–∂–∏–Ω–∞";
let strOstavashti = "–æ—Å—Ç–∞–≤–∞—â–∏";
let strIgrataENaPauza ="–ò–≥—Ä–∞—Ç–∞ –µ –Ω–∞ –ø–∞—É–∑–∞! –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ –∫–ª–∞–≤–∏—à '–ü–∞—É–∑–∞'";

let canvasWidth;
let canvasHeight;
let buttonSize;
let gap; // –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±—É—Ç–æ–Ω–∏—Ç–µ (3% –æ—Ç —à–∏—Ä–∏–Ω–∞—Ç–∞)
let centerX;
let bottomY;
let upX;
let upY;
let leftX;
let leftY;
let rightX;
let rightY;
let downX;
let downY;
let pauseX;
let pauseY;

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç –≤ sessionStorage
//–¢—è —Å–µ –∏–∑–≤–∏–∫–≤–∞ –ø–æ –∫—ä—Å–Ω–æ –æ—Ç button_click
const saveDifficulty = () => {
    const selected = document.querySelector('input[name="trudnost"]:checked'); // –ò–∑–±–∏—Ä–∞ –∏–∑–±—Ä–∞–Ω–∏—è —Ä–∞–¥–∏–æ –±—É—Ç–æ–Ω
    if (selected) {
        sessionStorage.setItem('difficulty', selected.id); // –ó–∞–ø–∞–∑–≤–∞ ID –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç
    }
};

function getLanguage() {
    if (systemLanguage.startsWith('bg')) {
        return 'bg'; // –ë—ä–ª–≥–∞—Ä—Å–∫–∏
    } else if (systemLanguage.startsWith('no') || systemLanguage.startsWith('nb') || systemLanguage.startsWith('nn')) {
        return 'no'; // –ù–æ—Ä–≤–µ–∂–∫–∏
    } else {
        return 'en'; // –ê–Ω–≥–ª–∏–π—Å–∫–∏ (–ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ)
    }
}
// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
const loadDifficulty = () => {
    const savedDifficulty = sessionStorage.getItem('difficulty'); // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∏–º–∞ –∑–∞–ø–∞–∑–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
    if (savedDifficulty) {
        const savedRadio = document.getElementById(savedDifficulty);
        if (savedRadio) {
            savedRadio.checked = true; // –ú–∞—Ä–∫–∏—Ä–∞ –∑–∞–ø–∞–∑–µ–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç –∫–∞—Ç–æ –∏–∑–±—Ä–∞–Ω–∞
        }
    }
};
// –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å–ª—É—à–∞—Ç–µ–ª–∏ –∑–∞ —Ä–∞–¥–∏–æ–±—É—Ç–æ–Ω–∏—Ç–µ
document.querySelectorAll('input[name="trudnost"]').forEach((radio) => {
    radio.addEventListener('change', saveDifficulty);
});
// –ó–∞—Ä–µ–∂–¥–∞ –∑–∞–ø–∞–∑–µ–Ω–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç, –∫–æ–≥–∞—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å–µ –∑–∞—Ä–µ–¥–∏
window.addEventListener('DOMContentLoaded', loadDifficulty);
restartButton.addEventListener("click", function(){
    location.reload(); // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
});
button.addEventListener ("click", function(){
    this.style.display = "none";
    cont.style.display = "none";
    btnStartPressed = true;
    saveDifficulty(); // –ó–∞–ø–∞–∑–≤–∞ –∏–∑–±–æ—Ä–∞ –Ω–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç
    if(easy.checked){
        speed = 3;
        brVragove = 2;
        enemiSkor2 = 1.5;
        enemiSkor1 = 0.5;
        /* speedTimer = 30; */
    }
    else if(medium.checked){
        speed = 4;
        brVragove = 3;
        enemiSkor2 = 2.0;
        enemiSkor1 = 1.0;
        /* speedTimer = 20; */
    }
    else{
        speed = 5;
        brVragove = 4;
        enemiSkor2 = 2.5;
        enemiSkor1 = 1.5;
        /* speedTimer = 10; */
    }
    createEneBalls();
    drawGame();
    });

function resizeCanvas() { 
    if(fin || brFin > 0) return;
    if(canvResized === true && btnStartPressed === false && broyach > 0 ||(chocar)){
        location.reload(); // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
    }
        //–ù–∞—á–∞–ª–æ
        //updateInfoBar();
        canvas.width = window.innerWidth+1;  // –ó–∞–¥–∞–≤–∞ —à–∏—Ä–∏–Ω–∞—Ç–∞ –Ω–∞ –≤–∏–¥–∏–º–∏—è –ø—Ä–æ–∑–æ—Ä–µ—Ü
        canvas.height = window.innerHeight - infoBar.offsetHeight+1; // –ó–∞–¥–∞–≤–∞ –≤–∏—Å–æ—á–∏–Ω–∞—Ç–∞ –Ω–∞ –≤–∏–¥–∏–º–∏—è –ø—Ä–æ–∑–æ—Ä–µ—Ü
        isPaused = false; //Igrata da prodalzhi
        canvResized = true; 
        broyach ++;

        canvasWidth = canvas.width;
        canvasHeight = canvas.height;
        if(canvasWidth < canvasHeight) {
            restartButton.textContent= "üîÑ";
        }
        else{
            restartButton.textContent= "Restart";
        }

        if(infoBar.style.backgroundColor = "rgba(180, 180, 180, 1)"){
            nastroiResumedGame();
        }   
        buttonSize = Math.max(canvasWidth, canvasHeight) * 0.06;
        gap = canvasWidth * 0.03; // –†–∞–∑—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±—É—Ç–æ–Ω–∏—Ç–µ (5% –æ—Ç —à–∏—Ä–∏–Ω–∞—Ç–∞)
    
        centerX = canvasWidth / 2;
        bottomY = canvasHeight - 2 * buttonSize - gap;
    
        upX = centerX - buttonSize / 2;
        upY = bottomY - buttonSize; // - gap;
    
        leftX = centerX - buttonSize - gap;
        leftY = bottomY;
    
        rightX = centerX + gap;
        rightY = bottomY;
    
        downX = centerX - buttonSize / 2;
        downY = bottomY + buttonSize;// + gap;
    
        pauseX = canvasWidth - buttonSize - gap;
        pauseY = bottomY;
}
window.addEventListener("blur", function () {
    if (!isPaused && btnStartPressed) {
        isPaused = true;
        nastroiPausedGame();
        //printNaPauza();
    }
});
// –ò–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ resizeCanvas –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∏ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞
window.addEventListener("resize", resizeCanvas);
    resizeCanvas(); // –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –æ—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ωe

function createBalls(){
    
    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ 50 —Å–ª—É—á–∞–π–Ω–∏ —Ç–æ–ø–∫–∏
for (let i = 0; i < BR_TOPKI; i++) {
    balls.push({
        x: Math.random() * (canvas.width - 30) + 15,
        y: Math.random() * (canvas.height - 30) + 15,
        vx: (Math.random() - 0.5) * 4,
        vy: (Math.random() - 0.5) * 4,
        radius: 15,
        isAttached: false, // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Ç–æ–ø–∫–∞—Ç–∞ –µ —á–∞—Å—Ç –æ—Ç –≤–ª–∞–∫—á–µ—Ç–æ
    });
}
// –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ç–æ–ø–∫–∞—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
playerBall = {
    x: canvas.width / 2,
    //y: canvas.height - 30,
    y: canvas.height + 40,
    vx: 0,
    vy: -speed,
    radius: 20,
    attachedBalls: [], // –ú–∞—Å–∏–≤ –∑–∞ –≤–ª–∞–∫—á–µ—Ç–æ
};
}
function createEneBalls(){
    for (let i = 0; i < brVragove; i++) {
        enemies.push({
            radius: 10,
            x: Math.random() * canvas.width, // –°–ª—É—á–∞–π–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ —Ö–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∞
            y: (i===0 ? 8 : 12), // –ù–∞—á–∞–ª–Ω–∞ y –ø–æ–∑–∏—Ü–∏—è
            vx: (Math.random() * enemiSkor2 + enemiSkor1) * (Math.random() < 0.5 ? -1 : 1), // –°–ª—É—á–∞–π–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç
            vy: 1.4,//Math.random() * enemiSkor2 + enemiSkor1, // –ü–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç –Ω–∞ –ø–∞–¥–∞–Ω–µ
        });

    }
}
/* document.addEventListener("keyup", (event) => {
    if (event.code === "Space") {
        spacePressed = false; // –ó–∞–¥–∞–≤–∞, —á–µ Space –≤–µ—á–µ –Ω–µ –µ –Ω–∞—Ç–∏—Å–Ω–∞—Ç
    }
}); */
canvas.addEventListener("click", handleMobileControlClick);

function nastroiPausedGame(){
    //canvas.style.cursor = 'auto';
    infoBar.style.backgroundImage = "linear-gradient(to bottom, rgba(150, 150, 150, 1), rgba(80, 80, 80, 1))";
    infoBar.style.backgroundColor = "rgba(180, 180, 180, 1)";
    infoBar.style.borderTop = "2px solid rgba(120, 120, 120, 1)"; // –°–∏–≤–∞ –≥–æ—Ä–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞
    infoBar.style.borderBottom = "2px solid rgba(200, 200, 200, 1)"; // –°–≤–µ—Ç–ª–æ —Å–∏–≤–∞ –¥–æ–ª–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞
    infoBar.textContent = strIgrataENaPauza;//"–ò–≥—Ä–∞—Ç–∞ –µ –Ω–∞ –ø–∞—É–∑–∞! –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ –∫–ª–∞–≤–∏—à '–ü–∞—É–∑–∞'";
}
function nastroiResumedGame(){
    infoBar.style.backgroundImage = "";
    infoBar.style.backgroundColor = "";
    infoBar.style.borderTop = "2px solid #8b0000"; // –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞
    infoBar.style.borderBottom = "2px solid #cd5c5c"; // –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞
    updateInfoBar();
}
function checkGameOver() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞ —Ç–æ–ø–∫–∞   
    // –ê–∫–æ –Ω—è–º–∞ —Å–≤–æ–±–æ–¥–Ω–∏ —Ç–æ–ø–∫–∏, –∏–≥—Ä–∞—Ç–∞ —Å–≤—ä—Ä—à–≤–∞ —Å –ø–æ–±–µ–¥–∞
    if (brSvobodniT() === 0) {
        brFin++;
    }
}
function narisuvaiPobedaZaguba(zagPob){
    let moiText ="";
    let bonusText=" ";
    let infoText = "";
    if(zagPob === "pobeda"){
        isPaused = true;
        fin = true;
        //canvas.style.cursor = 'auto';
        if(selectedLanguage==='bg'){
            moiText = `–ü–æ–±–µ–¥–∏—Ö—Ç–µ! –ò–º–∞—Ç–µ ${zakacheni} —Ç–æ–ø–∫–∏!`;
            infoText = '–û—á–∞–∫–≤–∞–π—Ç–µ –ø—Ä–æ–¥—ä–ª–∂–µ–Ω–∏–µ... üòâ';
        }
        else if(selectedLanguage==='no'){
            moiText = `Du vant! Du har ${zakacheni} kuler!`;
            infoText = 'Snart kommer det mer... üòâ';
        }
        else{
            moiText = `You won! You have ${zakacheni} balls!`;
            infoText = 'Stay tuned for more... üòâ';
        }
        pobedaSound.currentTime = 0;
        pobedaSound.play();
    }
    else { //zaguba
        chocar = true;
        isPaused = true;
        //canvas.style.cursor = 'auto';
        if(selectedLanguage==='bg'){
            moiText = `–°–±–ª—ä—Å—ä–∫!!! –ó–∞–≥—É–±–∏—Ö—Ç–µ.üòû –ò–º–∞—Ç–µ ${zakacheni} —Ç–æ–ø–∫–∏`;
            infoText = '–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ "–ü–ê–£–ó–ê" –∏–ª–∏ –†–µ—Å—Ç–∞—Ä—Ç –∑–∞ –Ω–æ–≤–∞ –∏–≥—Ä–∞.';
        }
        else if(selectedLanguage==='no'){
            moiText = `Kollisjon! Du tapte.üòû Du har ${zakacheni} kuler`;
            infoText = "Trykk 'PAUSE' eller Restart for et nytt spill.";
        }
        else{
            moiText = `Collision! You lost.üòû You have ${zakacheni} balls`;
            infoText = "Press 'PAUSE' or Restart for a new game.";
        }
        
        katasSound.currentTime = 0;
        katasSound.play();
    }
    
    // –ó–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∏–ª–æ–≤–µ –∑–∞ —Ç–µ–∫—Å—Ç–∞
    let mainFontSz, bonusFontSz, infoFontSz;
    if (canvasWidth < canvasHeight) {
        mainFontSz = 'bold 1rem Arial';
        bonusFontSz = 'bold 1rem Arial';
        infoFontSz = '1rem Arial';
    } 
    else {mainFontSz = 'bold 2rem Arial';
        bonusFontSz = 'bold 1.3rem Arial';
        infoFontSz = '1.2rem Arial';
    }
    
    ctx.textAlign = 'center'; // –¶–µ–Ω—Ç—Ä–∏—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Ö–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–Ω–æ
    ctx.textBaseline = 'middle'; // –¶–µ–Ω—Ç—Ä–∏—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª–Ω–æ
    //zakacheni = brZakacheniT();

    // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ —Å—è–Ω–∫–∞
    ctx.font = mainFontSz;
    ctx.fillStyle = 'gray'; // –¶–≤—è—Ç –Ω–∞ —Å—è–Ω–∫–∞—Ç–∞
    ctx.fillText(moiText, canvas.width / 2 + 1, canvas.height / 2.4 +2 );
    if(zakacheni === BR_TOPKI){
        if(selectedLanguage === 'bg'){
            bonusText = `–ë—Ä–∞–≤–æ! 100% —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç! ! !`;
        }
        else if(selectedLanguage==='no'){
            bonusText = `Bra jobbet! 100% suksessrate! ! !`;
        }
        else{
            bonusText = `Bravo! 100% success rate! ! !`;
        }
        ctx.font = bonusFontSz;
        ctx.fillText(bonusText, canvas.width / 2 + 1, canvas.height / 2.4 + 52);
    }
    
    // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—è —Ç–µ–∫—Å—Ç
    /* if(canvasWidth < canvasHeight){
        ctx.font = 'bold 1rem Arial';
    }else{
        ctx.font = 'bold 1.5rem Arial'; // –®—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä
    } */
    ctx.fillStyle = '#1e1e95'; // –û—Å–Ω–æ–≤–Ω–∏—è—Ç —Ü–≤—è—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–∞
    ctx.fillText(moiText, canvas.width / 2, canvas.height / 2.4);
    ctx.font = bonusFontSz;
    ctx.fillText(bonusText, canvas.width / 2, canvas.height / 2.4 + 50);
    
    ctx.font = infoFontSz;
    ctx.fillStyle ='#555';
    ctx.fillText(infoText, Math.round(canvas.width / 2), Math.round(canvas.height / 1.5));

}
function brSvobodniT(){
    const freeBalls = balls.filter(ball => !ball.isAttached);
    return freeBalls.length;
}
/* function brZakacheniT(){
    const zakachBalls = balls.filter(ball => ball.isAttached);
    return zakachBalls.length;
} */
function playMoveSound(path) {
    if(isPaused === false){
        const moveSoundInstance = new Audio(path);
        moveSoundInstance.play();
    }
}
function updateInfoBar() {
    if(!btnStartPressed){
        broiki= BR_TOPKI;
    }
    else{broiki= brSvobodniT();}
    infoBar.textContent = `${strHvanati}: ${points} | ${strDalg}: ${zakacheni} | ${strOstavashti}: ${broiki}`;
    //infoBar.textContent = `–•–≤–∞–Ω–∞—Ç–∏: ${points} —Ç–æ–ø–∫–∏ | –î—ä–ª–∂–∏–Ω–∞: ${zakacheni} —Ç–æ–ø–∫–∏ | –û—Å—Ç–∞–≤–∞—Ç: ${broiki} —Ç–æ–ø–∫–∏`;
}
// —É–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Ç–æ—á–∫–∏—Ç–µ:
function increasePoints(amount) {
    points += amount;
    updateInfoBar();
}


    function drawMobileControls() {   
        // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω–∏—Ç–µ
        ctx.fillStyle = "rgba(192, 192, 192, 0.6)"; // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–µ–Ω —Å–≤–µ—Ç–ª–æ—Å–∏–≤ —Ü–≤—è—Ç
        ctx.fillRect(upX, upY, buttonSize, buttonSize); // Up
        ctx.fillRect(leftX, leftY, buttonSize, buttonSize); // Left
        ctx.fillRect(rightX, rightY, buttonSize, buttonSize); // Right
        ctx.fillRect(downX, downY, buttonSize, buttonSize); // Down
        ctx.fillRect(pauseX, pauseY, buttonSize, buttonSize); // Pause
    
        // –¢–µ–∫—Å—Ç –≤—ä—Ä—Ö—É –±—É—Ç–æ–Ω–∏—Ç–µ
        ctx.fillStyle = "#316e2a";//–ó–µ–ª–µ–Ω–æ
        //ctx.font = `${Math.floor(buttonSize * 0.5)}px "Segoe UI Symbol"`; // –†–∞–∑–º–µ—Ä—ä—Ç –Ω–∞ —à—Ä–∏—Ñ—Ç–∞ –µ 50% –æ—Ç –≤–∏—Å–æ—á–∏–Ω–∞—Ç–∞ –Ω–∞ –±—É—Ç–æ–Ω–∏—Ç–µ
        ctx.font = `bold ${Math.floor(buttonSize * 0.5)}px "Segoe UI Symbol"`; // –†–∞–∑–º–µ—Ä—ä—Ç –Ω–∞ —à—Ä–∏—Ñ—Ç–∞ –µ 50% –æ—Ç –≤–∏—Å–æ—á–∏–Ω–∞—Ç–∞ –Ω–∞ –±—É—Ç–æ–Ω–∏—Ç–µ
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        
        ctx.fillText("‚Üë", upX + buttonSize / 2, upY + buttonSize / 2);
        ctx.fillText("‚Üê", leftX + buttonSize / 2, leftY + buttonSize / 2);
        ctx.fillText("‚Üí", rightX + buttonSize / 2, rightY + buttonSize / 2);
        ctx.fillText("‚Üì", downX + buttonSize / 2, downY + buttonSize / 2);
        ctx.font = `${Math.floor(buttonSize * 0.3)}px Arial`;
        ctx.fillText("Pause", pauseX + buttonSize / 2, pauseY + buttonSize / 2);
    }

    function handleMobileControlClick(event) {
        let zvukPath = "sounds/snakeZavoj.wav";
    
        // –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä–∏—Ç–µ –Ω–∞ canvas-–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏—Ç–µ –Ω–∞ –±—É—Ç–æ–Ω–∏—Ç–µ
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;  
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∫–ª–∏–∫ –≤—ä—Ä—Ö—É –±—É—Ç–æ–Ω–∏—Ç–µ
        if (x > upX && x < upX + buttonSize && y > upY && y < upY + buttonSize) {
            // Up button
            if (posoka !== "i") {
                playerBall.vx = 0;
                playerBall.vy = -speed;
                playMoveSound(zvukPath);
                posoka = "i";
            }
        } else if (x > leftX && x < leftX + buttonSize && y > leftY && y < leftY + buttonSize) {
            // Left button
            if (posoka !== "j") {
                playerBall.vx = -speed;
                playerBall.vy = 0;
                playMoveSound(zvukPath);
                posoka = "j";
            }
        } else if (x > rightX && x < rightX + buttonSize && y > rightY && y < rightY + buttonSize) {
            // Right button
            if (posoka !== "k") {
                playerBall.vx = speed;
                playerBall.vy = 0;
                playMoveSound(zvukPath);
                posoka = "k";
            }
        } else if (x > downX && x < downX + buttonSize && y > downY && y < downY + buttonSize) {
            // Down button
            if (posoka !== "m") {
                playerBall.vx = 0;
                playerBall.vy = speed;
                playMoveSound(zvukPath);
                posoka = "m";
            }
        } else if (x > pauseX && x < pauseX + buttonSize && y > pauseY && y < pauseY + buttonSize) {
            // Pause button
            if (btnStartPressed) {
                if (chocar === true || fin === true) {
                    location.reload(); // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
                }
                isPaused = !isPaused; // –ü—Ä–µ–≤–∫–ª—é—á–≤–∞ –º–µ–∂–¥—É –ø–∞—É–∑–∞ –∏ –∏–≥—Ä–∞
                if (isPaused) {
                    nastroiPausedGame();
                } else {
                    nastroiResumedGame();
                }
            }
        }
    }
    

/* function handleMobileControlClick(event) {
    let zvukPath = "sounds/snakeZavoj.wav";
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∫–ª–∏–∫ –≤—ä—Ä—Ö—É –±—É—Ç–æ–Ω–∏—Ç–µ
    if (x > 50 && x < 130 && y > 500 && y < 550) {
        //console.log("Up button clicked");
        if(posoka != "i"){
            playerBall.vx = 0;
            playerBall.vy = -speed;
            playMoveSound(zvukPath);
            posoka = "i";
            }
    } else if (x > 150 && x < 230 && y > 560 && y < 610) {
        //console.log("Left button clicked");
        if(posoka != "j"){
            playerBall.vx = -speed;
            playerBall.vy = 0;
            playMoveSound(zvukPath);
            posoka = "j";
        }
        
    } else if (x > 250 && x < 330 && y > 560 && y < 610) {
        //console.log("Right button clicked");
        if(posoka != "k"){
            playerBall.vx = speed;
            playerBall.vy = 0;
            playMoveSound(zvukPath);
            posoka = "k";
        }
    } else if (x > 350 && x < 430 && y > 500 && y < 550) {
        //console.log("Down button clicked");
        if(posoka != "m"){
            playerBall.vx = 0;
            playerBall.vy = speed;
            playMoveSound(zvukPath);
            posoka = "m";
        }

    } else if (x > 450 && x < 550 && y > 500 && y < 550) {
        //console.log("Pause button clicked");
        if(btnStartPressed){
            if(chocar === true || fin === true){
                location.reload(); // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
            }
            isPaused = !isPaused; // –ü—Ä–µ–≤–∫–ª—é—á–≤–∞ –º–µ–∂–¥—É –ø–∞—É–∑–∞ –∏ –∏–≥—Ä–∞
            //spacePressed = true; // –ó–∞–¥–∞–≤–∞, —á–µ Space –µ –Ω–∞—Ç–∏—Å–Ω–∞—Ç
            if(isPaused){
                nastroiPausedGame();
            }else{
                nastroiResumedGame();
            }
        }
    }
} */

function drawGame() {
    if (isPaused === false && chocar === false) { 
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ —Ç–æ–ø–∫–∞—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
        const gradient0 = ctx.createRadialGradient(playerBall.x - 6, playerBall.y - 6, 3, playerBall.x, playerBall.y, playerBall.radius);
        gradient0.addColorStop(0, "white");
        gradient0.addColorStop(0.5, "#57ff57");
        gradient0.addColorStop(1, "darkgreen");
        ctx.beginPath();
        ctx.arc(Math.round(playerBall.x), Math.round(playerBall.y), playerBall.radius, 0, Math.PI * 2);
        ctx.fillStyle = gradient0;
        ctx.fill();
        ctx.closePath();

        if(!isPaused){
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∫—Ä–∞—è –Ω–∞ –∏–≥—Ä–∞—Ç–∞
        checkGameOver(); // –ò–∑–≤–∏–∫–≤–∞–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –∑–∞ —Å–≤–æ–±–æ–¥–Ω–∏ —Ç–æ–ø–∫–∏
        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—á–∞
        playerBall.x += playerBall.vx;
        playerBall.y += playerBall.vy;

        // –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–Ω–µ –≤ –≥—Ä–∞–Ω–∏—Ü–∏—Ç–µ –Ω–∞ canvas
            if (playerBall.x < playerBall.radius) {playerBall.x = playerBall.radius;}
            if (playerBall.x > canvas.width - playerBall.radius) {playerBall.x = canvas.width - playerBall.radius;}
            if (playerBall.y < playerBall.radius) {playerBall.y = playerBall.radius;}
            if (playerBall.y > canvas.height - playerBall.radius && btnStartPressed) {playerBall.y = canvas.height - playerBall.radius; }
        }
        // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤–∏—Ç–µ —Ç–æ–ø–∫–∏
        
        enemies.forEach((enemy, index) => {
        const gradiEnem = ctx.createRadialGradient(enemy.x - 3, enemy.y - 3, 2, enemy.x, enemy.y, enemy.radius);
        gradiEnem.addColorStop(0, "white");
        gradiEnem.addColorStop(0.5, "#999");
        gradiEnem.addColorStop(1, "black");
        ctx.beginPath();
        ctx.arc(Math.round(enemy.x), Math.round(enemy.y), enemy.radius, 0, Math.PI * 2);
        ctx.fillStyle = gradiEnem;
        ctx.fill();
        ctx.closePath();

        // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        enemy.y += enemy.vy;
        enemy.x += enemy.vx;
        //console.log(enemy.vy);
            // –ê–∫–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—ä—Ç –¥–æ—Å—Ç–∏–≥–Ω–µ –¥—ä–Ω–æ—Ç–æ, —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –≥–æ –æ—Ç–≥–æ—Ä–µ
            /* if (enemy.y > canvas.height) {
                enemy.y = -enemy.radius;
                enemy.x = Math.random() * canvas.width;
            } */
        //–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤–∏—Ç–µ —Ç–æ–ø–∫–∏ –¥–∞ –æ—Ç—Å–∫–∞—á–∞—Ç
        if (enemy.x < enemy.radius || enemy.x > canvas.width - enemy.radius) enemy.vx *= -1;
        if (enemy.y < enemy.radius || enemy.y > canvas.height - enemy.radius) enemy.vy *= -1;
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å–±–ª—ä—Å—ä–∫ —Å –∏–≥—Ä–∞—á–∞
            const dx = playerBall.x - enemy.x;
            const dy = playerBall.y - enemy.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å–±–ª—ä—Å—ä–∫ —Å –æ–ø–∞—à–∫–∞—Ç–∞
            let zvukCortar = "sounds/minus.wav";
            playerBall.attachedBalls.forEach((attachedBall, attachedIndex) => {
                const dxTail = attachedBall.x - enemy.x;
                const dyTail = attachedBall.y - enemy.y;
                const distanceTail = Math.sqrt(dxTail * dxTail + dyTail * dyTail);
                if (distanceTail < attachedBall.radius + enemy.radius) {
                    // –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —á–∞—Å—Ç –æ—Ç –æ–ø–∞—à–∫–∞—Ç–∞
                    playerBall.attachedBalls.splice(attachedIndex);
                    zakacheni = playerBall.attachedBalls.length;
                    playMoveSound(zvukCortar);
                    updateInfoBar();
                }
            });
            let buffer = 4;
            if (distance < playerBall.radius + enemy.radius - buffer) {
                //alert("Game Over!");
                chocar = true;
            }
        });

        // –†–∏—Å—É–≤–∞–Ω–µ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–ø–∫–∏—Ç–µ
        balls.forEach((ball) => {
            if (!ball.isAttached) {
                const gradient = ctx.createRadialGradient(ball.x - 6, ball.y - 6, 5, ball.x, ball.y, ball.radius);
                gradient.addColorStop(0, "white");
                gradient.addColorStop(0.3, "orange");
                gradient.addColorStop(1, "darkred");
                ctx.beginPath();
                ctx.arc(Math.round(ball.x), Math.round(ball.y), ball.radius, 0, Math.PI * 2);
                ctx.fillStyle = gradient;
                ctx.fill();
                ctx.closePath();
                if(btnStartPressed === false) return;
                // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ç–∞
                ball.x += ball.vx;
                ball.y += ball.vy;
                // –û—Ç—Å–∫–∞—á–∞–Ω–µ –æ—Ç —Å—Ç–µ–Ω–∏—Ç–µ
                if (ball.x < ball.radius || ball.x > canvas.width - ball.radius) ball.vx *= -1;
                if (ball.y < ball.radius || ball.y > canvas.height - ball.radius) ball.vy *= -1;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –±–ª–∏–∑–æ—Å—Ç –Ω–∞ —Å–≤–æ–±–æ–¥–Ω. —Ç–æ–ø–∫–∞ —Å –∏–≥—Ä–∞—á–∞
                const dx = playerBall.x - ball.x;
                const dy = playerBall.y - ball.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance - 15 < playerBall.radius + ball.radius) {
                    let zvukHam = "sounds/ham.wav";
                    ball.isAttached = true;
                    playerBall.attachedBalls.push(ball);
                    zakacheni = playerBall.attachedBalls.length;
                    increasePoints(1); // –£–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Ç–æ—á–∫–∏—Ç–µ
                    playMoveSound(zvukHam);
                }
            }
        });

        // –†–∏—Å—É–≤–∞–Ω–µ –Ω–∞ –≤–ª–∞–∫—á–µ—Ç–æ
        let prevX = playerBall.x;
        let prevY = playerBall.y;
        playerBall.attachedBalls.forEach((attachedBall, index) => {
            const followSpeed = 0.2;
            attachedBall.x += (prevX - attachedBall.x) * followSpeed;
            attachedBall.y += (prevY - attachedBall.y) * followSpeed;

            const gradientA = ctx.createRadialGradient(attachedBall.x - 4, attachedBall.y - 4, 3, attachedBall.x, attachedBall.y, attachedBall.radius);
            gradientA.addColorStop(0, "white");
            gradientA.addColorStop(0.3, "#ffff6f");
            gradientA.addColorStop(1, "#9f9f01");
            const gradientB = ctx.createRadialGradient(attachedBall.x - 4, attachedBall.y - 4, 3, attachedBall.x, attachedBall.y, attachedBall.radius);
            gradientB.addColorStop(0, "white");
            gradientB.addColorStop(0.3, "#ff8989");
            gradientB.addColorStop(1, "darkred");
            ctx.beginPath();
            ctx.arc(Math.round(attachedBall.x), Math.round(attachedBall.y), attachedBall.radius, 0, Math.PI * 2);
            ctx.fillStyle = index % 2 === 0 ? gradientA : gradientB;
            ctx.fill();
            ctx.closePath();

            prevX = attachedBall.x;
            prevY = attachedBall.y;
        });
        drawMobileControls();
        if(chocar === true){
            updateInfoBar();
            narisuvaiPobedaZaguba("zaguba"); //chocar —Å—Ç–∞–≤–∞ true
            //return;
        };
        if(brFin > 30){
            brFin = 2;
            narisuvaiPobedaZaguba("pobeda");
            //return;
        }
    }
    if(btnStartPressed){
        requestAnimationFrame(drawGame);
    }
}
function dobaviAngl(){
    myH1.textContent="Let's play 'Magnetic Balls'";
    perviH3.childNodes[0].textContent ="Controls - with buttons ";
    vtoriH3.childNodes[0].textContent = "Pause the game - with the '";
    vtoriH3.childNodes[1].textContent ="PAUSE";
    vtoriH3.childNodes[2].textContent ="' - button.";
    lblLes.textContent = "Easy";
    lblSred.textContent = "Medium";
    lblTrud.textContent = "Hard";
    button.textContent = "Start";
    strHvanati = "caught";
    strDalg = "length";
    strOstavashti = "remaining";
    updateInfoBar();
    //document.getElementById("restartButton").textContent = "Restart";
    restartButton.textContent = "Restart";
    strIgrataENaPauza = "The game is paused! Press the 'Pause' key";
}

function dobaviNorsk(){
    myH1.textContent="La oss spille 'Magnetiske kuler'";
    perviH3.childNodes[0].textContent ="Kontroll - med knappene ";
    vtoriH3.childNodes[0].textContent = "Pause spillet - med '";
    vtoriH3.childNodes[1].textContent ="PAUSE";
    vtoriH3.childNodes[2].textContent ="' - knappen.";
    lblLes.textContent = "lett";
    lblSred.textContent = "middels";
    lblTrud.textContent = "vanskelig";
    button.textContent = "Start";
    strHvanati = "fanget";
    strDalg = "lengde";
    strOstavashti = "gjenst√•r";
    updateInfoBar();
    //document.getElementById("restartButton").textContent = "Start p√• nytt";
    restartButton.textContent = "Restart";
    strIgrataENaPauza = "Spillet er p√• pause! Trykk p√• 'Pause'-tasten";
}
if (selectedLanguage === 'en') {
    //console.log('–ó–∞—Ä–µ–∂–¥–∞ —Å–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏...');
    // –î–æ–±–∞–≤–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏ —Ç–µ–∫—Å—Ç
    dobaviAngl();
} else if (selectedLanguage === 'no') {
    //console.log('Laster norsk...');
    dobaviNorsk();// –î–æ–±–∞–≤–∏ –Ω–æ—Ä–≤–µ–∂–∫–∏ —Ç–µ–∫—Å—Ç
}
createBalls();
drawGame();
